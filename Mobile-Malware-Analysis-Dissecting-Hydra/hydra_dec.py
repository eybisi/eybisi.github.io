
import ghidra.app.script.GhidraScript
import exceptions
from ghidra.program.model.address import AddressOutOfBoundsException
from ghidra.program.model.symbol import SourceType

def xor_block(addr,size):

	first_block = getBytes(toAddr(addr),size).tolist()
	second_block = getBytes(toAddr(addr+size),size).tolist()

	a = ""
	for i in range(len(first_block)):
		a += chr(first_block[i]^second_block[i])
	trash = len("someval")
	return a[:-trash]
    
def block(addr):
	if addr == 0x34755:
		return 0x0003494f
	xrefs = getReferencesTo(toAddr(addr))
	if len(xrefs) ==0:
		return addr+1
		
	for xref in xrefs:
		ref_addr = xref.getFromAddress()
		try:
			inst = getInstructionAt(ref_addr.add(32))
		except AddressOutOfBoundsException as e:
			print("Found last xor block exiting..")
			exit()
		block_size = inst.getByte(2)
		dec_str = xor_block(addr,block_size)
		func = getFunctionBefore(ref_addr)
		new_name = "dec_"+dec_str[:-1]
		func.setName(new_name,SourceType.USER_DEFINED)
		print("Block : {} , func : {}, dec string : {}".format(hex(addr),func.getEntryPoint(),dec_str))

	return addr+2*block_size

def extract_encrypted_str():
	curr_block_location = 0x00034035

	for i in range(200):
		curr_block_location = block(curr_block_location)

def run():
	extract_encrypted_str()

run()
